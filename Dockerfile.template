# base-image for python on any machine using a template variable,
# see more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/
FROM balenalib/%%BALENA_MACHINE_NAME%%-python:3-stretch-run

# use `install_packages` if you need to install dependencies,
# for instance if you need git, just uncomment the line below.
# RUN install_packages git

# Set our working directory
WORKDIR /usr/src/app

# Copy requirements.txt first for better cache on later pushes
COPY requirements.txt requirements.txt

# pip install python deps from requirements.txt on the resin.io build server
RUN pip install -r requirements.txt


#raspberry pi camera

FROM balenalib/raspberry-pi-python:3.7-buster

# Install system packages required for compiling native extensions
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libjpeg-dev \
    git \
    libatlas-base-dev \
    libjasper-dev \
    libqtgui4 \
    libqt4-test \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip, setuptools, and wheel to ensure we have the latest versions
RUN python3 -m pip install --upgrade pip setuptools wheel

# Clone and install picamera2 if necessary as before
# ... your picamera2 installation steps here ...

# Now proceed to install Python dependencies
COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt

# Copy the rest of your application
COPY . /usr/src/app

CMD ["python3", "/usr/src/app/your_script.py"]

#End of raspberry pi camera





# This will copy all files in our root to the working  directory in the container
COPY . ./

# Enable udevd so that plugged dynamic hardware devices show up in our container.
ENV UDEV=1

# main.py will run when container starts up on the device
CMD ["python","-u","src/app.py"]
